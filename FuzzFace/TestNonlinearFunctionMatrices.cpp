
#define BOOST_TEST_MAIN


#include "TestHelper.h"

/*File paths for the state space matrices generated by matlab*/
std::string psi = th.folder + "nonlinearFunctionPSI.txt";
std::string phi = th.folder + "nonlinearFunctionPHI.txt";
std::string M = th.folder + "nonlinearFunctionM.txt";
std::string Kd = th.folder + "nonlinearFunctionKd.txt";

//Create an instance of Default Circuit and TestHelper
Circuit c;
TestHelper th;

/*Test the Nonlinear Function Matrix PSI obtained from the matlab file by comparing with the corresponding C++ generated matrix */
BOOST_AUTO_TEST_CASE(testNonlinearFunctionMatrixPSI) {
	//Create a matrix of doubles to store the result of c.getStateSpaceMatrix
	Eigen::MatrixXd testMatrix;
	testMatrix = c.getNonlinearFunctionMatrix("psi");

	bool testPass;
	testPass = th.matrixChecker(psi, testMatrix);

	BOOST_CHECK_EQUAL(testPass, true);
}

/*Test the Nonlinear Function Matrix PHI obtained from the matlab file by comparing with the corresponding C++ generated matrix */
BOOST_AUTO_TEST_CASE(testNonlinearFunctionMatrixPHI) {
	//Create a matrix of doubles to store the result of c.getStateSpaceMatrix
	Eigen::MatrixXd testMatrix;
	testMatrix = c.getNonlinearFunctionMatrix("phi");

	bool testPass = true;
	testPass = th.matrixChecker(phi, testMatrix);

	BOOST_CHECK_EQUAL(testPass, true);
}

/*Test the Nonlinear Function Matrix M obtained from the matlab file by comparing with the corresponding C++ generated matrix */
BOOST_AUTO_TEST_CASE(testNonlinearFunctionMatrixM) {
	//Create a matrix of doubles to store the result of c.getStateSpaceMatrix
	Eigen::MatrixXd testMatrix;
	testMatrix = c.getNonlinearFunctionMatrix("nonLinEquationMatrix");

	bool testPass = true;
	testPass = th.matrixChecker(M, testMatrix);

	BOOST_CHECK_EQUAL(testPass, true);
}

/*Test the Nonlinear Function Matrix M obtained from the matlab file by comparing with the corresponding C++ generated matrix */
BOOST_AUTO_TEST_CASE(testNonlinearFunctionMatrixKd) {
	//Create a matrix of doubles to store the result of c.getStateSpaceMatrix
	Eigen::MatrixXd testMatrix;
	testMatrix = c.getNonlinearFunctionMatrix("alteredStateSpaceK");

	bool testPass = true;
	testPass = th.matrixChecker(Kd, testMatrix);

	BOOST_CHECK_EQUAL(testPass, true);
}




